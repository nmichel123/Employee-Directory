{"version":3,"sources":["assets/bigHandshake.jpg","components/Header.js","components/Jumbotron.js","pages/Home.js","components/data.js","components/Navbar.js","components/Employees.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","Jumbotron","class","href","role","Home","src","Handshake","alt","roundedCircle","columns","accessor","data","firstName","lastName","dep","job","salary","Navbar","EmpTable","useState","filterInput","setFilterInput","useTable","useFilters","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","setFilter","value","onChange","e","target","undefined","placeholder","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","i","getRowProps","cells","cell","getCellProps","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cb155edd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bigHandshake.6a1f0ae5.jpg\";","import React from \"react\";\nimport \"../styles/Header.css\";\n\nfunction Header() {\n  return (\n    <header className=\"header\">\n      <h1>Employee Directory</h1>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from 'react';\n\nfunction Jumbotron () {\n    return (\n        <div className=\"jumbotron\">\n        <h1>Click The Button Below To See The Employee Table!</h1>\n        <p>\n         How it works: \n\n         Click the button to go to the table. When column headings are clicked, the table is sorted from ascending to descending based on the value.\n         (Ex. First name is clicked, it is sorted alphabetically, clicked again it is sorted in reverse, clicked again it reverts to its original state).\n         There is a search bar to search by employee's first name at the top. It will show only the employees who have that name. There are sections for first name, last name, \n         department, position and salary. \n        </p>\n        <p>\n            <a class=\"btn btn-primary btn-lg\" href=\"/table\" role=\"button\">Search Employees</a> \n        </p>\n      </div>\n)};\n\nexport default Jumbotron;\n\n","import React from 'react';\nimport Header from '../components/Header';\nimport Jumbotron from '../components/Jumbotron';\nimport Handshake from '../assets/bigHandshake.jpg'; \nimport '../App.css';\n\nfunction Home () {\n    return (\n        <div>\n    <Header />\n    <Jumbotron />\n    <img src={Handshake} className = \"handshake\" alt=\"handshake\" roundedCircle />\n        </div>\n      )}\n\nexport default Home; \n\n","export const columns = [\n    {\n      Header: 'First Name',\n      accessor: 'firstName',\n    },\n    {\n      Header: 'Last Name',\n      accessor: 'lastName',\n    },\n    {\n      Header: 'Department',\n      accessor: 'dep',\n    },\n    {\n      Header: 'Position',\n      accessor: 'job',\n    },\n    {\n      Header: 'Salary',\n      accessor: 'salary',\n    },\n  ];\n  \n  export const data = [\n    {\n        firstName: 'Bobert',\n        lastName: 'McKinley',\n        dep: 'Sales',\n        job: 'Traveling Salesman',\n        salary: '$7.50/hr',\n    },\n    {\n        firstName: 'Jhonnie',\n        lastName: 'Khanwald',\n        dep: 'Furniture',\n        job: 'Upholstery',\n        salary: '$15.00/hr',\n    },\n    {\n        firstName: 'Peabrain',\n        lastName: 'Sherman',\n        dep: 'Legal',\n        job: 'Paralegal',\n        salary: '$6.50/hr',\n    },\n    {\n        firstName: 'Phil',\n        lastName: 'Rook',\n        dep: 'Management',\n        job: 'General Manager',\n        salary: '$20.00/hr',\n    },\n    {\n        firstName: 'Jessica',\n        lastName: 'Alvarez',\n        dep: 'Furniture',\n        job: 'Inventory Coordinator',\n        salary: '$17.00/hr',\n    },\n    {\n        firstName: 'Eleanor',\n        lastName: 'Hunt',\n        dep: 'Management',\n        job: 'Assistant Manager',\n        salary: '$12.00/hr',\n    },\n    {\n        firstName: 'Thomas',\n        lastName: 'Skarret',\n        dep: 'Legal',\n        job: 'Head Lawyer',\n        salary: '$50.00/hr',\n    },\n    {\n        firstName: 'Roselyn',\n        lastName: 'Walts',\n        dep: 'Management',\n        job: 'Assistant Manager',\n        salary: '$15.00/hr',\n    },\n    {\n        firstName: 'Gert',\n        lastName: 'Adams',\n        dep: 'Sales',\n        job: 'In-Store Salesman',\n        salary: '$5.00/hr + Commission',\n    },\n    {\n        firstName: 'Mattress',\n        lastName: 'Mack',\n        dep: 'Sales',\n        job: 'Gallery Furniture King',\n        salary: '$80.00/hr',\n    },\n  ];","import React from 'react'; \n\nfunction Navbar () {\n    return (\n<div>\n<nav class=\"navbar navbar-dark bg-dark\">\n  <a class=\"navbar-brand\" href=\"/\">Home</a>\n</nav>\n</div>\n    )}; \n\nexport default Navbar; ","import React, {useState} from 'react'; \nimport { useTable, useSortBy, useFilters } from 'react-table';\nimport { columns, data } from './data';\nimport Navbar from './Navbar'\nimport '../styles/Table.css'\n\nfunction EmpTable () {\n\n    const [filterInput,setFilterInput] = useState(\"\");\n\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        rows,\n        prepareRow,\n        setFilter\n    } = useTable ({\n        columns,\n        data,\n    },\n    useFilters,\n    useSortBy\n    );\n\n    const handleFilterChange = e => {\n        const value = e.target.value || undefined;\n        setFilter(\"firstName\", value);\n        setFilterInput(value);\n    };\n\n    return (\n        <div>\n        <Navbar />\n        <input\n          value={filterInput}\n          onChange={handleFilterChange}\n          placeholder={\"Search by First Name\"}\n        />\n        <table {...getTableProps()}>\n            <thead>\n                {headerGroups.map(headerGroup => (\n                    <tr {...headerGroup.getHeaderGroupProps()}>\n                        {headerGroup.headers.map(column => (\n                            <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                {column.render('Header')}\n                <span>\n                  {column.isSorted ? (column.isSortedDesc ? \" ðŸ”½\" : \" ðŸ”¼\") : \"\"}\n                </span>\n                            </th>\n                        ))}\n                    </tr>\n                ))}\n            </thead>\n            <tbody {...getTableBodyProps()}>\n                {rows.map((row,i) => {\n                    prepareRow(row)\n                    return (\n                        <tr {...row.getRowProps()}>\n                            {row.cells.map(cell => {\n                                return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                            })}\n                        </tr>\n                    )\n                })}\n            </tbody>\n        </table>\n        </div>\n    );\n};\n\nexport default EmpTable;","import React from 'react';\nimport Home from './pages/Home';\nimport EmpTable from './components/Employees';\nimport './App.css';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\n\nfunction App() {\n  return (\n  <Router>\n    <div>\n<Route exact path = \"/\" component = {Home} />\n<Route exact path = \"/table\" component = {EmpTable} />\n    </div>\n    </Router>\n  )} \n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}